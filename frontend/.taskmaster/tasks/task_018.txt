# Task ID: 18
# Title: Create AllKindResultPage Component
# Status: pending
# Dependencies: 1, 9, 16
# Priority: high
# Description: Develop a comprehensive results page that displays all chart types without tab navigation in a single unified view, showing financial analysis regardless of document type.
# Details:
Implementation steps:

1. Create a new file `AllKindResultPage.tsx` in the ViewResults directory:
```tsx
import React, { useState, useEffect } from 'react';
import { Box, Typography, Grid, CircularProgress } from '@mui/material';
import { BaseResultsPage } from './BaseResultsPage';
import { FinancialCharts } from '../components/charts/FinancialCharts';
import { getFilteredFinancialData } from '../utils/dataFilters';
```

2. Extend the BaseResultsPage component to create a unified view:
```tsx
const AllKindResultPage: React.FC = () => {
  const [loading, setLoading] = useState<boolean>(true);
  const [financialData, setFinancialData] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    try {
      // Fetch data for all document types
      const balanceSheetData = getFilteredFinancialData('balance-sheet');
      const cashFlowData = getFilteredFinancialData('cash-flow');
      const incomeStatementData = getFilteredFinancialData('income-statement');
      
      setFinancialData({
        balanceSheet: balanceSheetData,
        cashFlow: cashFlowData,
        incomeStatement: incomeStatementData
      });
      setLoading(false);
    } catch (err) {
      setError('Failed to load financial data');
      setLoading(false);
    }
  }, []);
```

3. Implement the render method with comprehensive chart display:
```tsx
  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h4" gutterBottom>Comprehensive Financial Analysis</Typography>
      
      {/* Balance Sheet Section */}
      <Box sx={{ marginBottom: 4 }}>
        <Typography variant="h5" gutterBottom>Balance Sheet Analysis</Typography>
        {financialData?.balanceSheet ? (
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <FinancialCharts 
                chartType="assetAllocation" 
                data={financialData.balanceSheet} 
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FinancialCharts 
                chartType="liabilityBreakdown" 
                data={financialData.balanceSheet} 
              />
            </Grid>
          </Grid>
        ) : (
          <Typography>Balance sheet data is not available to display</Typography>
        )}
      </Box>
      
      {/* Cash Flow Section */}
      <Box sx={{ marginBottom: 4 }}>
        <Typography variant="h5" gutterBottom>Cash Flow Analysis</Typography>
        {financialData?.cashFlow ? (
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <FinancialCharts 
                chartType="cashFlowTrends" 
                data={financialData.cashFlow} 
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FinancialCharts 
                chartType="cashFlowComponents" 
                data={financialData.cashFlow} 
              />
            </Grid>
          </Grid>
        ) : (
          <Typography>Cash flow data is not available to display</Typography>
        )}
      </Box>
      
      {/* Income Statement Section */}
      <Box sx={{ marginBottom: 4 }}>
        <Typography variant="h5" gutterBottom>Income Statement Analysis</Typography>
        {financialData?.incomeStatement ? (
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <FinancialCharts 
                chartType="revenueAnalysis" 
                data={financialData.incomeStatement} 
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FinancialCharts 
                chartType="expensesBreakdown" 
                data={financialData.incomeStatement} 
              />
            </Grid>
            <Grid item xs={12}>
              <FinancialCharts 
                chartType="profitMargins" 
                data={financialData.incomeStatement} 
              />
            </Grid>
          </Grid>
        ) : (
          <Typography>Income statement data is not available to display</Typography>
        )}
      </Box>
    </Box>
  );
};

export default AllKindResultPage;
```

4. Ensure the component follows existing design patterns from BaseResultsPage:
   - Use consistent Material-UI components and styling
   - Implement proper loading states and error handling
   - Follow the same data fetching patterns

5. Utilize the existing FinancialCharts component for data visualization:
   - Pass appropriate chart types and data to the component
   - Handle missing data gracefully with informative messages

6. Implement responsive design:
   - Use Grid components with responsive breakpoints
   - Ensure charts resize appropriately on different screen sizes

7. Add the new route in the application router:
```tsx
// In router configuration
<Route path="/view-results/all" element={<AllKindResultPage />} />
```

# Test Strategy:
1. Unit Testing:
   - Create unit tests for the AllKindResultPage component using Jest and React Testing Library
   - Test the component's rendering with various data scenarios:
     ```tsx
     test('renders loading state correctly', () => {
       // Mock the loading state
       jest.spyOn(React, 'useState').mockImplementationOnce(() => [true, setLoading]);
       render(<AllKindResultPage />);
       expect(screen.getByRole('progressbar')).toBeInTheDocument();
     });
     
     test('renders error state correctly', () => {
       // Mock the error state
       jest.spyOn(React, 'useState').mockImplementation(() => [false, setLoading])
         .mockImplementationOnce(() => [null, setFinancialData])
         .mockImplementationOnce(() => ['Error message', setError]);
       render(<AllKindResultPage />);
       expect(screen.getByText('Error message')).toBeInTheDocument();
     });
     ```
   - Test data fetching and processing logic
   - Verify proper handling of missing data with appropriate messages

2. Integration Testing:
   - Test integration with the BaseResultsPage component
   - Verify that all chart types render correctly with real data
   - Test navigation to and from the AllKindResultPage
   - Ensure proper data flow between components

3. Visual Testing:
   - Verify responsive design on different screen sizes (mobile, tablet, desktop)
   - Check that all charts are properly sized and positioned
   - Ensure consistent styling with the rest of the application
   - Verify that section headings and typography follow design guidelines

4. User Acceptance Testing:
   - Verify that all financial charts display correctly
   - Confirm that "data not available" messages appear when appropriate
   - Test with different financial datasets to ensure robust handling
   - Verify that the page loads efficiently with multiple charts

5. Accessibility Testing:
   - Test keyboard navigation throughout the page
   - Verify proper heading hierarchy for screen readers
   - Check color contrast for all UI elements
   - Ensure all charts have appropriate ARIA attributes

# Subtasks:
## 1. Create AllKindResultPage Component Structure [pending]
### Dependencies: None
### Description: Create the basic structure for the AllKindResultPage component that extends BaseResultsPage, including imports, state management, and loading/error handling.
### Details:
Create a new file `AllKindResultPage.tsx` in the ViewResults directory. Import necessary components from React and Material-UI. Set up the component with useState hooks for loading state, financial data, and error handling. Implement the useEffect hook to fetch data and basic rendering logic for loading and error states.

## 2. Implement Data Fetching Logic [pending]
### Dependencies: None
### Description: Develop the data fetching functionality to retrieve and organize financial data from all document types (balance sheet, cash flow, income statement).
### Details:
Within the useEffect hook, implement the data fetching logic using getFilteredFinancialData utility for each document type. Structure the data into a unified object with separate properties for balanceSheet, cashFlow, and incomeStatement. Ensure proper error handling and state updates.

## 3. Create Balance Sheet and Cash Flow Sections [pending]
### Dependencies: None
### Description: Implement the UI sections for displaying Balance Sheet and Cash Flow data with appropriate charts and responsive layout.
### Details:
Create two main sections with Typography headers. For each section, implement Grid containers with responsive breakpoints. Use the FinancialCharts component to display relevant chart types (assetAllocation, liabilityBreakdown for Balance Sheet; cashFlowTrends, cashFlowComponents for Cash Flow). Add conditional rendering to handle missing data gracefully with informative messages.

## 4. Create Income Statement Section [pending]
### Dependencies: None
### Description: Implement the UI section for displaying Income Statement data with appropriate charts and responsive layout.
### Details:
Create the Income Statement section with Typography header. Implement a Grid container with responsive breakpoints. Use the FinancialCharts component to display relevant chart types (revenueAnalysis, expensesBreakdown, profitMargins). Add conditional rendering to handle missing data gracefully. Ensure the profitMargins chart spans the full width of the container.

## 5. Add Routing and Final Integration [pending]
### Dependencies: None
### Description: Add the new route to the application router and ensure the component integrates properly with the existing application.
### Details:
Add a new route in the application router configuration that points to the AllKindResultPage component: `<Route path="/view-results/all" element={<AllKindResultPage />} />`. Ensure the component follows existing design patterns from BaseResultsPage. Verify that the component is properly exported and can be imported by the router. Test the navigation to this page from other parts of the application.

