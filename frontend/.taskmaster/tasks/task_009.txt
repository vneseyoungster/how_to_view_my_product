# Task ID: 9
# Title: Implement Chart Selection by Document Type
# Status: done
# Dependencies: 8
# Priority: medium
# Description: Create a chart mapping utility to select and configure appropriate charts based on document type.
# Details:
This task has been implemented with the following components:

1. Created chartConfig.ts with comprehensive chart type definitions and document-to-chart mapping
2. Implemented DocumentSpecificCharts.tsx component that dynamically renders charts based on document type
3. Added chart configurations for balance-sheet, cash-flow, and income-statement (assets excluded per requirements)
4. Implemented data availability checking to enable/disable charts accordingly

Implementation details:
```tsx
// chartConfig.ts
// Contains chart type definitions and document-to-chart mapping

// Example structure:
export interface ChartConfig {
  id: string;
  title: string;
  description: string;
  component: React.ComponentType<any>;
  dataRequirements: string[];
}

export const documentChartMapping: Record<string, ChartConfig[]> = {
  'balance-sheet': [
    // Balance sheet chart configurations
  ],
  'cash-flow': [
    // Cash flow chart configurations
  ],
  'income-statement': [
    // Income statement chart configurations
  ]
};

// DocumentSpecificCharts.tsx
import React from 'react';
import { documentChartMapping } from '../utils/chartConfig';

interface DocumentSpecificChartsProps {
  documentType: string;
  data: any;
}

export const DocumentSpecificCharts: React.FC<DocumentSpecificChartsProps> = ({ documentType, data }) => {
  const charts = documentChartMapping[documentType] || [];
  
  return (
    <div className="document-charts">
      {charts.map(chart => {
        const hasRequiredData = chart.dataRequirements.every(req => {
          // Check if required data is available
          return data && data[req] !== undefined;
        });
        
        if (hasRequiredData) {
          const ChartComponent = chart.component;
          return (
            <div key={chart.id} className="chart-container">
              <h3>{chart.title}</h3>
              <p>{chart.description}</p>
              <ChartComponent data={data} />
            </div>
          );
        }
        return null;
      })}
    </div>
  );
};
```

# Test Strategy:
1. Unit test the chart configuration in chartConfig.ts
   - Verify all required chart types are defined
   - Check document-to-chart mapping is correct
   - Ensure proper type definitions

2. Test DocumentSpecificCharts.tsx component
   - Verify correct chart rendering based on document type
   - Test with various data inputs
   - Verify data availability checking works correctly
   - Test with missing or partial data

3. Integration tests
   - Verify charts render correctly in the document viewer
   - Test switching between different document types
   - Verify proper error handling for invalid document types

4. Verify charts are only configured for balance-sheet, cash-flow, and income-statement (not assets)
