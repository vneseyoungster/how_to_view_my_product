# Task ID: 19
# Title: Update Navigation Logic for Multiple Type Selection
# Status: pending
# Dependencies: 7, 18, 17
# Priority: medium
# Description: Modify the upload completion flow in UploadDocumentsPage.tsx to handle "Multiple Type" document selection and navigate to AllKindResultPage appropriately.
# Details:
This task involves updating the navigation logic in the UploadDocumentsPage component to properly handle scenarios where users select multiple document types during upload.

Implementation steps:

1. Locate and modify the `handleUploadComplete` function in UploadDocumentsPage.tsx:
```tsx
// Update the existing function to detect multiple document types
const handleUploadComplete = (uploadedDocuments: UploadedDocument[]) => {
  try {
    // Store uploaded documents in session storage
    sessionStorage.setItem('uploadedDocuments', JSON.stringify(uploadedDocuments));
    
    // Determine if multiple document types are present
    const documentTypes = new Set(uploadedDocuments.map(doc => doc.documentType));
    
    // If multiple types are detected, navigate to AllKindResultPage
    if (documentTypes.size > 1) {
      // Store a flag indicating multiple types were selected
      sessionStorage.setItem('isMultipleDocumentTypes', 'true');
      navigate('/processing-documents?type=multiple');
    } else {
      // Existing logic for single document type
      const documentType = uploadedDocuments[0]?.documentType || 'unknown';
      sessionStorage.setItem('documentType', documentType);
      sessionStorage.setItem('isMultipleDocumentTypes', 'false');
      navigate(`/processing-documents?type=${documentType}`);
    }
  } catch (error) {
    console.error('Error handling upload completion:', error);
    // Display error notification to user
    setUploadError('Failed to process uploaded documents. Please try again.');
  }
};
```

2. Update the ProcessingDocumentsPage component to handle the "multiple" type parameter:
```tsx
// In ProcessingDocumentsPage.tsx
useEffect(() => {
  const params = new URLSearchParams(location.search);
  const documentType = params.get('type');
  
  // Handle multiple document types
  if (documentType === 'multiple') {
    // After processing is complete, navigate to AllKindResultPage
    setTimeout(() => {
      navigate('/results/all-kind');
    }, PROCESSING_DELAY);
  } else {
    // Existing logic for single document types
    // ...
  }
}, []);
```

3. Add error handling for navigation edge cases:
```tsx
// Add fallback logic in case of navigation errors
if (!documentType || documentType === 'unknown') {
  console.error('Unknown document type detected');
  // Provide a fallback navigation option
  navigate('/upload-documents', { 
    state: { error: 'Unable to process documents. Please try again.' } 
  });
}
```

4. Ensure proper session storage handling for multiple type uploads:
```tsx
// Store additional metadata for multiple document types
if (documentTypes.size > 1) {
  sessionStorage.setItem('documentTypes', JSON.stringify([...documentTypes]));
  sessionStorage.setItem('primaryDocumentType', 'multiple');
}
```

5. Update any relevant type definitions:
```tsx
// Add to existing type definitions if needed
type DocumentType = 'balance-sheet' | 'income-statement' | 'cash-flow' | 'assets' | 'multiple';
```

# Test Strategy:
1. Unit Testing:
   - Create unit tests for the updated `handleUploadComplete` function:
   ```tsx
   test('handleUploadComplete navigates to AllKindResultPage when multiple document types are detected', () => {
     // Mock navigate function
     const mockNavigate = jest.fn();
     jest.mock('react-router-dom', () => ({
       ...jest.requireActual('react-router-dom'),
       useNavigate: () => mockNavigate
     }));
     
     // Mock documents with multiple types
     const mockDocuments = [
       { id: '1', documentType: 'balance-sheet', fileName: 'balance.pdf' },
       { id: '2', documentType: 'income-statement', fileName: 'income.pdf' }
     ];
     
     // Call the function
     handleUploadComplete(mockDocuments);
     
     // Verify navigation and session storage
     expect(mockNavigate).toHaveBeenCalledWith('/processing-documents?type=multiple');
     expect(sessionStorage.getItem('isMultipleDocumentTypes')).toBe('true');
   });
   ```

2. Integration Testing:
   - Test the complete upload flow with multiple document types:
     - Upload documents of different types
     - Verify correct navigation to processing page
     - Confirm navigation to AllKindResultPage after processing
     - Check that the correct data is displayed on the AllKindResultPage

3. Edge Case Testing:
   - Test with a single document type to ensure existing functionality works
   - Test with empty document array
   - Test with invalid document types
   - Test with very large numbers of documents
   - Test session storage limits with large document sets

4. User Flow Testing:
   - Verify the user experience remains intuitive when selecting multiple document types
   - Test the back navigation from AllKindResultPage
   - Ensure proper error messages are displayed when issues occur

5. Browser Compatibility:
   - Test the updated navigation logic across different browsers
   - Verify session storage works consistently across browsers

6. Error Handling:
   - Simulate network errors during navigation
   - Test with corrupted session storage data
   - Verify error messages are user-friendly and actionable
